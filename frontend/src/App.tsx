import { AxiosError } from "axios";
import { Fragment, useContext, useEffect, useState } from "react";
import { Route, Routes } from "react-router-dom";
import AuthForm from "./components/auth/AuthForm";
import NewTask from "./components/NewTask";
import TaskList from "./components/TaskList";
import { TaskType } from "./components/taskTypes";
import AuthContext from "./contexts/auth-context";
import NavBar from "./layout/NavBar";
import client from "./utils/api";

const App = () => {
  const [tasks, setTasks] = useState<TaskType[]>([]);
  const [error, setError] = useState<AxiosError>();

  const authCtx = useContext(AuthContext);

  const authHead = {
    headers: {
      Authorization: `Bearer ${authCtx.token}`,
    },
  };

  // For the first page hit, fetch every task from backend DB.
  useEffect(() => {
    client
      .get("/tasks", authHead)
      .then((response) => {
        setTasks(response.data);
        console.log(response.data);
      })
      .catch((err) => {
        setError(err);
      });
  }, []);

  // Handler for Add Task button.
  const addTaskHandler = (task: TaskType) => {
    // send POST request and append the response data to array `tasks`.
    // The response comes with an ID generated by the backend DB.
    client
      .post("/tasks", task, authHead)
      .then((response) => {
        if (response.data.error !== undefined && response.data.error !== "") {
          alert(`Error from server: ${response.data.error}`);
          return;
        }
        setTasks((prevTasks: TaskType[]) => {
          return [...prevTasks, response.data];
        });
      })
      .catch((err) => {
        setError(err);
      });
  };

  // Handler for Edit button.
  const editTaskHandler = (task: TaskType) => {
    // send PUT request and update the task upon receiving a response
    console.log("trying to edit: ");
    console.log(task);
    client
      .put(`/tasks/${task._id}`, task, authHead)
      .then((response) => {
        console.log(response);
        setTasks((prevTasks: TaskType[]) => {
          return prevTasks.map((elem: TaskType) => {
            if (elem._id !== task._id) return elem;
            else return task;
          });
        });
      })
      .catch((err) => {
        setError(err);
      });
  };

  // Handler for Delete button.
  const deleteTaskHandler = (task: TaskType) => {
    // send DELETE request and delete the task up on reception from backend DB
    console.log("trying to delete: ");
    console.log(task);
    client
      .delete(`/tasks/${task._id}`, authHead)
      .then(() => {
        setTasks((prevTasks: TaskType[]) => {
          return prevTasks.filter((elem: TaskType) => elem._id !== task._id);
        });
      })
      .catch((err) => {
        setError(err);
      });
  };

  //if (error) {
  //  return <h2>{`Error: ${error.message}`}</h2>;
  //}

  return (
    <Fragment>
      {error && <h2>{`Error: ${error.message}`}</h2>}
      <NavBar />
      <Routes>
        <Route path="/auth" element={<AuthForm />} />
        <Route
          path="/"
          element={
            <Fragment>
              <NewTask onAddTask={addTaskHandler} />
              <TaskList
                tasks={tasks}
                onDeleteTask={deleteTaskHandler}
                onEditTask={editTaskHandler}
              />
            </Fragment>
          }
        />
      </Routes>
    </Fragment>
  );
};

export default App;
